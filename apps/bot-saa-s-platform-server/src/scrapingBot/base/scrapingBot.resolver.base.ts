/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ScrapingBot } from "./ScrapingBot";
import { ScrapingBotCountArgs } from "./ScrapingBotCountArgs";
import { ScrapingBotFindManyArgs } from "./ScrapingBotFindManyArgs";
import { ScrapingBotFindUniqueArgs } from "./ScrapingBotFindUniqueArgs";
import { CreateScrapingBotArgs } from "./CreateScrapingBotArgs";
import { UpdateScrapingBotArgs } from "./UpdateScrapingBotArgs";
import { DeleteScrapingBotArgs } from "./DeleteScrapingBotArgs";
import { Bot } from "../../bot/base/Bot";
import { ScrapingBotService } from "../scrapingBot.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ScrapingBot)
export class ScrapingBotResolverBase {
  constructor(
    protected readonly service: ScrapingBotService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ScrapingBot",
    action: "read",
    possession: "any",
  })
  async _scrapingBotsMeta(
    @graphql.Args() args: ScrapingBotCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ScrapingBot])
  @nestAccessControl.UseRoles({
    resource: "ScrapingBot",
    action: "read",
    possession: "any",
  })
  async scrapingBots(
    @graphql.Args() args: ScrapingBotFindManyArgs
  ): Promise<ScrapingBot[]> {
    return this.service.scrapingBots(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ScrapingBot, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ScrapingBot",
    action: "read",
    possession: "own",
  })
  async scrapingBot(
    @graphql.Args() args: ScrapingBotFindUniqueArgs
  ): Promise<ScrapingBot | null> {
    const result = await this.service.scrapingBot(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ScrapingBot)
  @nestAccessControl.UseRoles({
    resource: "ScrapingBot",
    action: "create",
    possession: "any",
  })
  async createScrapingBot(
    @graphql.Args() args: CreateScrapingBotArgs
  ): Promise<ScrapingBot> {
    return await this.service.createScrapingBot({
      ...args,
      data: {
        ...args.data,

        bot: args.data.bot
          ? {
              connect: args.data.bot,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ScrapingBot)
  @nestAccessControl.UseRoles({
    resource: "ScrapingBot",
    action: "update",
    possession: "any",
  })
  async updateScrapingBot(
    @graphql.Args() args: UpdateScrapingBotArgs
  ): Promise<ScrapingBot | null> {
    try {
      return await this.service.updateScrapingBot({
        ...args,
        data: {
          ...args.data,

          bot: args.data.bot
            ? {
                connect: args.data.bot,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ScrapingBot)
  @nestAccessControl.UseRoles({
    resource: "ScrapingBot",
    action: "delete",
    possession: "any",
  })
  async deleteScrapingBot(
    @graphql.Args() args: DeleteScrapingBotArgs
  ): Promise<ScrapingBot | null> {
    try {
      return await this.service.deleteScrapingBot(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Bot, {
    nullable: true,
    name: "bot",
  })
  @nestAccessControl.UseRoles({
    resource: "Bot",
    action: "read",
    possession: "any",
  })
  async getBot(@graphql.Parent() parent: ScrapingBot): Promise<Bot | null> {
    const result = await this.service.getBot(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
