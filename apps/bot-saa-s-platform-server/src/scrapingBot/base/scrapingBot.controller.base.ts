/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ScrapingBotService } from "../scrapingBot.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ScrapingBotCreateInput } from "./ScrapingBotCreateInput";
import { ScrapingBot } from "./ScrapingBot";
import { ScrapingBotFindManyArgs } from "./ScrapingBotFindManyArgs";
import { ScrapingBotWhereUniqueInput } from "./ScrapingBotWhereUniqueInput";
import { ScrapingBotUpdateInput } from "./ScrapingBotUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ScrapingBotControllerBase {
  constructor(
    protected readonly service: ScrapingBotService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ScrapingBot })
  @nestAccessControl.UseRoles({
    resource: "ScrapingBot",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createScrapingBot(
    @common.Body() data: ScrapingBotCreateInput
  ): Promise<ScrapingBot> {
    return await this.service.createScrapingBot({
      data: {
        ...data,

        bot: data.bot
          ? {
              connect: data.bot,
            }
          : undefined,
      },
      select: {
        bot: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        schedule: true,
        targetUrl: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ScrapingBot] })
  @ApiNestedQuery(ScrapingBotFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ScrapingBot",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async scrapingBots(@common.Req() request: Request): Promise<ScrapingBot[]> {
    const args = plainToClass(ScrapingBotFindManyArgs, request.query);
    return this.service.scrapingBots({
      ...args,
      select: {
        bot: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        schedule: true,
        targetUrl: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ScrapingBot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ScrapingBot",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async scrapingBot(
    @common.Param() params: ScrapingBotWhereUniqueInput
  ): Promise<ScrapingBot | null> {
    const result = await this.service.scrapingBot({
      where: params,
      select: {
        bot: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        schedule: true,
        targetUrl: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ScrapingBot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ScrapingBot",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateScrapingBot(
    @common.Param() params: ScrapingBotWhereUniqueInput,
    @common.Body() data: ScrapingBotUpdateInput
  ): Promise<ScrapingBot | null> {
    try {
      return await this.service.updateScrapingBot({
        where: params,
        data: {
          ...data,

          bot: data.bot
            ? {
                connect: data.bot,
              }
            : undefined,
        },
        select: {
          bot: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          schedule: true,
          targetUrl: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ScrapingBot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ScrapingBot",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteScrapingBot(
    @common.Param() params: ScrapingBotWhereUniqueInput
  ): Promise<ScrapingBot | null> {
    try {
      return await this.service.deleteScrapingBot({
        where: params,
        select: {
          bot: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          schedule: true,
          targetUrl: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
